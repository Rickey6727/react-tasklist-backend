'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CLASS_PREFIX = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _immutabilityHelper = require('immutability-helper');

var _immutabilityHelper2 = _interopRequireDefault(_immutabilityHelper);

var _calc = require('./calc');

var _style = require('./style');

var _style2 = _interopRequireDefault(_style);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * internal classname prefix
 * @type {string}
 */
var CLASS_PREFIX = exports.CLASS_PREFIX = 'react-ja-date-picker__';

/**
 * Define Calender Picker Component
 * @return {ReactComponent} React Component
 */

var DatePicker = function (_Component) {
  _inherits(DatePicker, _Component);

  /**
   * initializ state
   * @public
   * @param  {Props} props given props
   * @return {void}
   */


  /**
   * props type check
   * @type {Object}
   */
  function DatePicker(props) {
    _classCallCheck(this, DatePicker);

    var _this = _possibleConstructorReturn(this, (DatePicker.__proto__ || Object.getPrototypeOf(DatePicker)).call(this, props));

    var tmp = (0, _moment2.default)(_this.props.date);
    var date = tmp.isValid() ? tmp : (0, _moment2.default)();
    _this.state = {
      year: date.year(),
      month: date.month() + 1,
      styles: (0, _calc.normalizeStyle)(_style2.default),
      hovering: false,
      focusing: false
    };
    return _this;
  }

  /**
   * generate static className and style objects
   * @param  {array<string>|string} slug your slug in snake-case
   * @return {{className:string,style:cssInJs}} generated object
   */


  /**
   * default values of props
   * @type {Object}
   */


  _createClass(DatePicker, [{
    key: 'classStyle',
    value: function classStyle(slug) {
      var result = {
        className: CLASS_PREFIX + slug,
        style: this.state.styles[(0, _calc.snake2camel)(slug)]
      };
      return result;
    }

    /**
     * manage hover status
     * @param  {string} id id
     * @return {{onMouseEnter:function,onMouseLeave:function}}  eventHandlers
     */

  }, {
    key: 'enableHover',
    value: function enableHover(id) {
      var _this2 = this;

      return {
        onMouseEnter: function onMouseEnter() {
          return _this2.hoverOn(id);
        },
        onMouseLeave: function onMouseLeave() {
          return _this2.hoverOn(false);
        }
      };
    }

    /**
     * manage focus status
     * @param  {string} id id
     * @return {{onBlur:function,onFocus:function}}  eventHandlers
     */

  }, {
    key: 'enableFocus',
    value: function enableFocus(id) {
      var _this3 = this;

      return {
        onBlur: function onBlur() {
          return _this3.focusOn(false);
        },
        onFocus: function onFocus() {
          return _this3.focusOn(id);
        }
      };
    }

    /**
     * format prop overload with {string} or {function}
     * @param  {number} year  year
     * @param  {number} month month
     * @param  {number} day day
     * @return {string} the aimed URL string
     */

  }, {
    key: 'getURL',
    value: function getURL(year, month, day) {
      var result = typeof this.props.format === 'function' ? format(year, month, day) : // use it as it is
      (0, _calc.strFormat)(this.props.format, { year: year, month: month, day: day }); // use embedded
      return result;
    }

    /**
     * check if a element with certain id is being hovered
     * @param  {string}  id  given id
     * @return {boolean}     whether hoverring
     */

  }, {
    key: 'isHovering',
    value: function isHovering(id) {
      return this.state ? this.state.hovering === id : false;
    }

    /**
     * check if a elelment with certain id is being focused
     * @param  {string}  id given id
     * @return {boolean}    whether focusing
     */

  }, {
    key: 'isFocusing',
    value: function isFocusing(id) {
      return this.state ? this.state.focusing === id : false;
    }

    /**
     * create callback to set hoverirng state
     * @param  {string|boolean} id giving id, or false to cancel it
     * @return {void}
     */

  }, {
    key: 'hoverOn',
    value: function hoverOn(id) {
      this.setState((0, _immutabilityHelper2.default)(this.state, { hovering: { $set: id } }));
    }

    /**
     * create callback to set focusing state
     * @param  {string|boolean} id giving id, or false to cancel it
     * @return {void}
     */

  }, {
    key: 'focusOn',
    value: function focusOn(id) {
      this.setState((0, _immutabilityHelper2.default)(this.state, { focusing: { $set: id } }));
    }

    /**
     * change next month
     * @return {void}
     */

  }, {
    key: 'moveMonthFoward',
    value: function moveMonthFoward() {
      var nYear = this.state.month + 1 > 12 ? this.state.year + 1 : this.state.year;
      var nMonth = this.state.month == 12 ? 1 : this.state.month + 1;
      this.setState((0, _immutabilityHelper2.default)(this.state, { year: { $set: nYear }, month: { $set: nMonth } }));
    }

    /**
     * change prev month
     * @return {void}
     */

  }, {
    key: 'moveMonthBackward',
    value: function moveMonthBackward() {
      var nYear = this.state.month - 1 == 0 ? this.state.year - 1 : this.state.year;
      var nMonth = this.state.month - 1 == 0 ? 12 : this.state.month - 1;
      this.setState((0, _immutabilityHelper2.default)(this.state, { year: { $set: nYear }, month: { $set: nMonth } }));
    }

    /**
     * render
     * @return {ReactComponent} render a calender picker
     */

  }, {
    key: 'render',
    value: function render() {
      var _this4 = this;

      // parse props
      var type = this.props.type;
      var onSelect = this.props.onSelect;

      // parse style object
      var STYLE = (0, _calc.normalizeStyle)(_style2.default);

      // parse state
      var _state = this.state,
          year = _state.year,
          month = _state.month;

      /**
       * render week labels as date picker table head component
       * @type {array<ReactComponent>}
       */

      var headRow = _react2.default.createElement(
        'tr',
        null,
        _react2.default.createElement(
          'th',
          _extends({
            scope: 'row'
          }, this.classStyle('sr-only')),
          '週'
        ),
        _config2.default.weekLabels.ja.map(function (label) {
          return _react2.default.createElement(
            'th',
            _extends({
              key: 'weeklabel-' + label,
              scope: 'col'
            }, _this4.classStyle('week-label')),
            label
          );
        })
      );

      /**
       * 当月の日の情報をまとめたオブジェクトを出力する
       * @type {array<array<{day:number,month:number,active:boolean,weekday:string,isHoliday:boolean}>>}
       */
      var thisMonth = (0, _calc.getMonthCalendar)(year, month);
      var todayUnixSec = (0, _moment2.default)().startOf('day').unix();
      var selectedDayUnixSec = (0, _moment2.default)(this.props.date).startOf('day').unix();

      /**
       * render date picker table body component
       * @type {array<ReactComponent>}
       */
      var bodyRows = thisMonth.map(function (week, i) {
        return _react2.default.createElement(
          'tr',
          { key: month + '-' + (i + 1) },
          _react2.default.createElement(
            'th',
            _extends({
              scope: 'row'
            }, _this4.classStyle('sr-only')),
            '\u7B2C' + (i + 1) + '\u9031'
          ),
          week.map(function (_ref) {
            var day = _ref.day,
                month = _ref.month,
                year = _ref.year,
                active = _ref.active,
                weekday = _ref.weekday,
                isHoliday = _ref.isHoliday;


            var key = 'month-day-' + year + '-' + month + '-' + day;

            var _props$highlighted$sp = _this4.props.highlighted.split('-').map(function (x) {
              return parseInt(x);
            }),
                _props$highlighted$sp2 = _slicedToArray(_props$highlighted$sp, 3),
                highlightedYear = _props$highlighted$sp2[0],
                highlightedMonth = _props$highlighted$sp2[1],
                highlightedDay = _props$highlighted$sp2[2];

            var isHighlighted = year === highlightedYear && month === highlightedMonth && day === highlightedDay;

            /**
             * deprecated
             * NOTE: これは、CSS-in-JSのようなものを試そうとした名残
             * v2.0.0では廃止して外部のライブラリ導入を目指す
             * @type {Object}
             */
            var style = _extends({}, STYLE.day, active ? STYLE.active : STYLE.notActive, STYLE[weekday], isHoliday ? STYLE.holiday : {}, _this4.isHovering(key) ? STYLE['day:hover'] : {});

            var theDayUnixSec = (0, _moment2.default)([year, month - 1, day]).unix();
            var tens = todayUnixSec < theDayUnixSec ? 'future' : todayUnixSec === theDayUnixSec ? 'today' : todayUnixSec > theDayUnixSec ? 'past' : 'tens-error';

            var relativeTens = selectedDayUnixSec < theDayUnixSec ? 'relative-future' : selectedDayUnixSec === theDayUnixSec ? 'relative-today' : selectedDayUnixSec > theDayUnixSec ? 'relative-past' : 'relative-tens-error';

            return _react2.default.createElement(
              'td',
              _extends({
                className: ['day', active ? 'active' : 'not-active', isHighlighted ? 'highlighted' : 'not-highlighted', isHoliday ? 'holiday' : 'weekday', tens, relativeTens].map(function (slug) {
                  return CLASS_PREFIX + slug;
                }).join(' '),
                key: key,
                style: style
              }, _this4.enableHover(key)),
              type === 'link' ? // exports <a> or <button>
              _react2.default.createElement(
                'a',
                _extends({
                  className: CLASS_PREFIX + 'day_' + type,
                  href: _this4.getURL(year, month, day),
                  style: _this4.isFocusing(key) ? STYLE['link:focus'] : STYLE.link
                }, _this4.enableFocus(key), {
                  onClick: function onClick() {
                    return onSelect(year, month, day);
                  }
                }),
                day
              ) : _react2.default.createElement(
                'button',
                _extends({
                  className: CLASS_PREFIX + 'day_' + type,
                  style: _this4.isFocusing(key) ? STYLE['button:focus'] : STYLE.button
                }, _this4.enableFocus(key), {
                  onClick: function onClick() {
                    return onSelect(year, month, day);
                  }
                }),
                day
              )
            );
          })
        );
      });

      // generate each style for buttons
      /**
       * ホバーしているかどうかに基づいて、先月に移動するボタンのクラスをオブジェクトの形式で生成する
       * @type {object}
       */
      var stylePrev = this.isHovering('button-prev') ? _extends({}, STYLE['navButton:hover'], STYLE.navPrev) : _extends({}, STYLE.navButton, STYLE.navPrev);
      /**
       * ホバーしているかどうかに基づいて、来月に移動するボタンのクラスをオブジェクトの形式で生成する
       * @type {object}
       */
      var styleNext = this.isHovering('button-next') ? _extends({}, STYLE['navButton:hover'], STYLE.navNext) : _extends({}, STYLE.navButton, STYLE.navNext);

      return _react2.default.createElement(
        'div',
        this.classStyle('container'),
        _react2.default.createElement(
          'nav',
          this.classStyle('navigation'),
          _react2.default.createElement(
            'button',
            _extends({
              className: CLASS_PREFIX + 'nav-button ' + CLASS_PREFIX + 'nav-prev',
              onClick: function onClick() {
                return _this4.moveMonthBackward();
              },
              style: stylePrev
            }, this.enableHover('button-prev')),
            '←'
          ),
          _react2.default.createElement(
            'button',
            _extends({
              className: CLASS_PREFIX + 'nav-button ' + CLASS_PREFIX + 'nav-next',
              onClick: function onClick() {
                return _this4.moveMonthFoward();
              },
              style: styleNext
            }, this.enableHover('button-next')),
            '→'
          )
        ),
        _react2.default.createElement(
          'div',
          this.classStyle('calender'),
          _react2.default.createElement(
            'table',
            null,
            _react2.default.createElement(
              'caption',
              this.classStyle('caption'),
              year + '\u5E74' + month + '\u6708'
            ),
            _react2.default.createElement(
              'thead',
              this.classStyle('week-labels'),
              headRow
            ),
            _react2.default.createElement(
              'tbody',
              this.classStyle('calender-grid'),
              bodyRows
            )
          )
        )
      );
    }
  }]);

  return DatePicker;
}(_react.Component);

DatePicker.defaultProps = {
  date: '',
  format: '#',
  highlighted: '',
  type: 'link',
  onSelect: function onSelect(x) {
    return x;
  } };
exports.default = DatePicker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,